/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            COMMA, PLUS, LPAREN, RPAREN, LBRACK, RBRACK, IF, ELSE, RPARENLBRACK, PREFIX, SUFFIX;
//terminal            MINUS, EXP, SEMI;
//terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal            program;
non terminal String  main, function_dec, function_dec_list, function_dec_argument, function_dec_argument_list, function_dec_body,
                     top_if_else, inner_if_else, top_condition, inner_condition,
                     top_condition_list, inner_condition_list, top_do, inner_do,
                     top_lvl_function_call, top_lvl_function_call_argument, top_lvl_function_call_argument_list,
                     low_lvl_function_call, low_lvl_function_call_argument, low_lvl_function_call_argument_list,
                     string_or_id_or_tern, string_or_tern;
/**
 *  Precedence Declarations
 */
//precedence left IF;
precedence right PLUS;
//precedence left PLUS, MINUS;
//precedence right EXP;

/**
 *  The Grammar Rules
 */
//PROGRAM DECLARATION
program ::= function_dec_list:f main:m
        {:
            System.out.println("import java.lang.Math;\n");
            System.out.println("public class Main {");
            System.out.println("\tpublic static void main(String[] args) {");
            System.out.printf("%s", m);
            //System.out.println("\t\tSystem.out.println(); //it exists anyway in order to feed a new line to the output, no matter the input");
            System.out.println("\t}");
            System.out.printf("%s", f);
            System.out.println("}");
        :}
        ;
//END OF PROGRAM DECLARATION

//FUNCTION DECLARATION
function_dec_list ::= function_dec_list:rest function_dec:e  {: RESULT = String.format("%s\n\tpublic static String %s\n", rest, e); :}
                  |                                          {: RESULT = ""; :}
                  ;

function_dec      ::= ID:id LPAREN function_dec_argument_list:argl RPARENLBRACK function_dec_body:s RBRACK  {: RESULT = String.format("%s(%s) {\n\t\treturn %s;\n\t}", id, argl, s); :}
                  ;

function_dec_argument_list     ::= function_dec_argument:e function_dec_argument_list:rest   {: RESULT = String.format("%s%s", e, rest); :}
                               |                                                             {: RESULT = ""; :}
                               ;

function_dec_argument ::= ID:arg {: RESULT = String.format("String %s", arg); :}
                        | COMMA ID:arg {: RESULT = String.format(", String %s", arg); :}
                       ;

function_dec_body    ::=  STRING_LITERAL:s                        {: RESULT = String.format("\"%s\"", s); :}
                           | ID:i                                    {: RESULT = String.format("%s", i); :}
                           | inner_if_else:t                         {: RESULT = String.format("(%s)", t); :}
                           | low_lvl_function_call:f    {: RESULT = String.format("%s", f); :}
                           | function_dec_body:s1 PLUS function_dec_body:s2  {: RESULT = String.format("(%s + %s)", s1, s2); :}
                           ;
//END OF FUNCTION DECLARATION

//MAIN FUNCTION
main          ::= top_lvl_function_call:e main:rest {: RESULT = String.format("\t\tSystem.out.println(%s);\n%s", e, rest); :}
                   | top_if_else:e main:rest   {: RESULT = String.format("\t\tSystem.out.println(%s);\n%s", e, rest); :}
                   | STRING_LITERAL:s           {: RESULT = String.format("\t\tSystem.out.println(\"%s\");", s); :}
                   | main:s1 PLUS main:s2  {: RESULT = String.format("%s\n%s", s1, s2); :}
                   |                             {: RESULT = ""; :}
                   ;
//END OF MAIN FUNCTION

//FUNCTION CALL
//top_level
top_lvl_function_call               ::= ID:id LPAREN top_lvl_function_call_argument_list:argl RPAREN {: RESULT = String.format("%s(%s)", id, argl, s); :}
                                      ;

top_lvl_function_call_argument_list ::=  top_lvl_function_call_argument:e top_lvl_function_call_argument_list:rest {: RESULT = String.format("%s%s", e, rest); :}
                                      |                                                                            {: RESULT = ""; :}
                                      ;

top_lvl_function_call_argument      ::= STRING_LITERAL:s {: RESULT = String.format("\"%s\"", s); :}
                                      | top_lvl_function_call:f {: RESULT = String.format("%s", f); :}
                                      | top_if_else:f               {: RESULT = String.format("(%s)", f); :}
                                      | COMMA STRING_LITERAL:s {: RESULT = String.format(", \"%s\"", s); :}
                                      | COMMA top_lvl_function_call:f {: RESULT = String.format(", %s", f); :}
                                      | COMMA top_if_else:f  {: RESULT = String.format(", (%s)", f); :}
                                      | top_lvl_function_call_argument:s1 PLUS top_lvl_function_call_argument:s2  {: RESULT = String.format("%s + %s", s1, s2); :}
//                                      | PLUS STRING_LITERAL:s {: RESULT = String.format(" + \"%s\"", s); :}
//                                      | PLUS top_lvl_function_call:f {: RESULT = String.format(" + %s", f); :}
                                      ;

//low_level
low_lvl_function_call               ::= ID:id LPAREN low_lvl_function_call_argument_list:argl RPAREN {: RESULT = String.format("%s(%s)", id, argl, s); :}
                                      ;

low_lvl_function_call_argument_list ::= low_lvl_function_call_argument:e low_lvl_function_call_argument_list:rest {: RESULT = String.format("%s%s", e, rest); :}
                                      |                                                                           {: RESULT = ""; :}
                                      ;

low_lvl_function_call_argument      ::= ID:arg {: RESULT = String.format("%s", arg); :}
                                      | STRING_LITERAL:s {: RESULT = String.format("\"%s\"", s); :}
                                      | low_lvl_function_call:f {: RESULT = String.format("%s", f); :}
                                      | inner_if_else:f  {: RESULT = String.format("(%s)", f); :}
                                      | COMMA ID:arg {: RESULT = String.format(", %s", arg); :}
                                      | COMMA STRING_LITERAL:s {: RESULT = String.format(", \"%s\"", s); :}
                                      | COMMA low_lvl_function_call:f {: RESULT = String.format(", %s", f); :}
                                      | COMMA inner_if_else:f  {: RESULT = String.format(",(%s)", f); :}
                                      | low_lvl_function_call_argument:s1 PLUS low_lvl_function_call_argument:s2  {: RESULT = String.format("%s + %s", s1, s2); :}
//                                      | PLUS ID:arg {: RESULT = String.format(" + %s", arg); :}
//                                      | PLUS STRING_LITERAL:s {: RESULT = String.format(" + \"%s\"", s); :}
//                                      | PLUS low_lvl_function_call:f {: RESULT = String.format(" + %s", f); :}
                                      ;
//END OF FUNCTION CALL


//IF_ELSE
//top_level
top_if_else          ::= IF LPAREN top_condition_list:c RPAREN top_do:d1 ELSE top_do:d2 {: RESULT = String.format("%s ? %s : %s", c, d1, d2); :}
                       ;

top_condition_list      ::=  top_condition:e top_condition_list:rest         {: RESULT = String.format("%s%s", e, rest); :}
                          |                                          {: RESULT = ""; :}
                          ;

top_condition           ::= string_or_tern:s1 PREFIX string_or_tern:s2  {: RESULT = String.format("%s.startsWith(%s)", s2, s1); :}
                          | string_or_tern:s1 SUFFIX string_or_tern:s2    {: RESULT = String.format("%s.endsWith(%s)", s2, s1); :}
                          ;

top_do          ::= STRING_LITERAL:s {: RESULT = String.format("\"%s\"", s); :}
                  | top_if_else:f  {: RESULT = String.format("(%s)", f); :}
                  | top_lvl_function_call:f {: RESULT = String.format("%s", f); :}
                  | top_do:s1 PLUS top_do:s2  {: RESULT = String.format("(%s + %s)", s1, s2); :}
                  ;

string_or_tern ::= STRING_LITERAL:s           {: RESULT = String.format("\"%s\"", s); :}
                 | top_if_else:t                  {: RESULT = String.format("(%s)", t); :}
                 | top_lvl_function_call:f    {: RESULT = String.format("%s", f); :}
                 | string_or_tern:s1 PLUS string_or_tern:s2  {: RESULT = String.format("(%s + %s)", s1, s2); :}
                 ;
//inner
inner_if_else        ::= IF LPAREN inner_condition_list:c RPAREN inner_do:d1 ELSE inner_do:d2 {: RESULT = String.format("%s ? %s : %s", c, d1, d2); :}
                       ;


inner_condition_list      ::=  inner_condition:e inner_condition_list:rest         {: RESULT = String.format("%s%s", e, rest); :}
                            |                                          {: RESULT = ""; :}
                            ;

inner_condition           ::= string_or_id_or_tern:s1 PREFIX string_or_id_or_tern:s2  {: RESULT = String.format("%s.startsWith(%s)", s2, s1); :}
                            | string_or_id_or_tern:s1 SUFFIX string_or_id_or_tern:s2    {: RESULT = String.format("%s.endsWith(%s)", s2, s1); :}
                            ;

inner_do          ::= STRING_LITERAL:s {: RESULT = String.format("\"%s\"", s); :}
                    | ID:i                       {: RESULT = String.format("%s", i); :}
                    | inner_if_else:f  {: RESULT = String.format("(%s)", f); :}
                    | low_lvl_function_call:f {: RESULT = String.format("%s", f); :}
                    | inner_do:s1 PLUS inner_do:s2  {: RESULT = String.format("(%s + %s)", s1, s2); :}
                    ;

string_or_id_or_tern ::= STRING_LITERAL:s           {: RESULT = String.format("\"%s\"", s); :}
                       | ID:i                       {: RESULT = String.format("%s", i); :}
                       | inner_if_else:t                  {: RESULT = String.format("(%s)", t); :}
                       | low_lvl_function_call:f    {: RESULT = String.format("%s", f); :}
                       | string_or_id_or_tern:s1 PLUS string_or_id_or_tern:s2  {: RESULT = String.format("(%s + %s)", s1, s2); :}
                       ;
//END OF IF_ELSE
